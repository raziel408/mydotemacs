#+startup: overview
* Los paquetes que uso 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
  (use-package beacon
    :ensure t
    :init
    (beacon-mode nil))
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package indent-guide
    :ensure t
    ;; :config
    ;; (set-face-background 'indent-guide-face "dimgray")
    :init
    (indent-guide-global-mode))

  (use-package pandoc
    :ensure t)
#+END_SRC
* Rest Client:
#+begin_src emacs-lisp
  (use-package restclient
    :ensure t)
  (use-package ob-restclient
    :ensure t
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((restclient . t))))
#+end_src
* Configuraciones globales:
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (electric-pair-mode t)
  (line-number-mode 1)
  (column-number-mode 1)
  ;; (when window-system (global-hl-line-mode t))
  (defalias 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (save-place-mode 1)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)
  (setq split-height-threshold 80)
  (setq split-width-threshold 100)
  (defvar backup-dir "~/.emacs.d/backups/")
  (setq backup-directory-alist (list (cons "." backup-dir)))
#+END_SRC
* Terminal:
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate `ansi-term)
#+end_src
* Yasnippet:
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package js-react-redux-yasnippets
      :ensure t)
    :hook (after-init . yas-global-mode)
    (yas-reload-all))
#+end_src
* switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
* Ivy:
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+end_src
* Projectile:
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
* Mode line
#+begin_src emacs-lisp
  (use-package telephone-line
    :ensure t
    :init
    (telephone-line-mode 1))
#+end_src
* Navegador
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "/usr/bin/python3")
#+END_SRC

* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    (setq flycheck-javascript-standard-executable "semistandard"))

  (setq-default flycheck-disabled-checkers
		(append flycheck-disabled-checkers
			'(javascript-jshint json-jsonlist)))

  ;; Enable eslint checker for web-mode
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  ;; Enable flycheck globally
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)
  (use-package add-node-modules-path
    :ensure t
    :init
    (add-hook 'flycheck-mode-hook 'add-node-modules-path))
#+end_src
* Company mode:
** Vainilla Company:
#+begin_src emacs-lisp
  ;; (use-package company
  ;;   :ensure t)
  ;; (use-package company
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'after-init-hook 'global-company-mode))
  ;; (use-package company-auctex
  ;;   :ensure t
  ;;   :config
  ;;   (require 'company)
  ;;   :init
  ;;   (company-auctex-init))
  ;; (use-package company-web-html)
  ;; (use-package company-web-jade)
  ;; (use-package company-web-slim)
#+end_src
** Usando LSP:
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (after-init . global-company-mode)
    ;; :bind (:map company-active-map
    ;; 	 ("<tab>" . company-complete-selection))
    ;; 	(:map lsp-mode-map
    ;; 	 ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src
* Orgmode:
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'toggle-truncate-lines)
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  (setq org-directory "~/Orgmode")
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-default-notes-file (concat org-directory "/Intinerario/tareassinclasificar.org"))
#+end_src
** org-ref:
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :ensure t)
  (use-package org-ref
    :ensure t
    :config
    (require 'org-ref-ivy)
    (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	  org-ref-insert-cite-function 'org-ref-cite-insert-ivy
	  org-ref-insert-label-function 'org-ref-insert-label-link
	  org-ref-insert-ref-function 'org-ref-insert-ref-link
	  org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (setq bibtex-completion-bibliography '("~/Sync/bibliografiaMat/mizbiblio.bib"))
    (setq bibtex-completion-library-path '("~/Articulos"))
    (setq bibtex-completion-pdf-field "File"))
#+end_src
** Org-roam:
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Orgmode/huginandmunin"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :config
  ;;   (setq org-roam-directory "~/Orgmode/huginandmunin")
  ;;   (org-roam-db-autosync-mode))
#+end_src
* Dashboard:
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 30)))
    (setq dashboard-banner-logo-title "Hang the viggers!!!"))
#+end_src
* Info books:
#+begin_src emacs-lisp
  (setq Info-additional-directory-list '("~/Libros/tutoriales/sicp"))
#+end_src
