#+startup: overview
* Los paquetes que uso 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  (use-package beacon
    :ensure t
    :init
    (beacon-mode nil))

  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package indent-guide
    :ensure t
    :init
    (indent-guide-global-mode))

  (use-package pandoc
    :ensure t)

  (use-package pdf-tools
    :ensure t
    :init
    (pdf-tools-install))

  (use-package elfeed
    :ensure t)

  (use-package elpher
    :ensure t)

  (use-package lorem-ipsum
    :ensure t)
#+END_SRC
* Modos varios:
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook
    (js-mode . emmet-mode)
    (html-mode . emmet-mode))

  (use-package yaml-mode
    :ensure t
    :mode "\\.yml\\'")

  (use-package haskell-mode
    :ensure t)

  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)
    :mode "\\.dat\\'")

  (use-package csv-mode
    :ensure t
    :mode "\\.csv\\'")

  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile\\'")

  (use-package epresent
    :ensure t)

  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'")

  (use-package typescript-mode
    :ensure t)

  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src
* Testing
#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :custom-face
    (hl-todo ((t (:inherit hl-todo :italic t))))
    :hook ((prog-mode . hl-todo-mode)))
#+end_src
* Rest Client:
#+begin_src emacs-lisp
  (use-package restclient
    :ensure t)
  (use-package ob-restclient
    :ensure t
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((restclient . t))))
#+end_src

* Engine mode
#+begin_src emacs-lisp
  (use-package engine-mode
    :ensure t
    :config
    (engine-mode t))

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine mozilawebdoc
    "https://developer.mozilla.org/en-US/search?q=%s")

  (defengine searx
    "https://searx.org/search?q=%s")
#+end_src
* reloj
#+begin_src emacs-lisp
  (setq display-time-24hr-format 1)
  (display-time-mode 0)
  (display-battery-mode -1)
#+end_src
* Configuraciones globales:
** Las que me gustan (estan bien):
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (electric-pair-mode t)
  (line-number-mode 1)
  (column-number-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (save-place-mode 1)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)
  (setq split-height-threshold 80)
  (setq split-width-threshold 100)
  (defvar backup-dir "~/.emacs.d/backups/")
  (setq backup-directory-alist (list (cons "." backup-dir)))
#+END_SRC
** Las que no estan bien:
#+BEGIN_SRC emacs-lisp
  ;; emojis
  ;; Hay que instalar symbola y dajavu fonts
  (when (member "Symbola" (font-family-list))
    (set-fontset-font
     t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
#+END_SRC
** Transparencia:
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
  (add-to-list 'default-frame-alist '(alpha . (85 . 50)))
#+end_src
* Terminal:
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate `ansi-term)
#+end_src
* Yasnippet:
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package js-react-redux-yasnippets
      :ensure t)
    :hook (after-init . yas-global-mode)
    (yas-reload-all))
#+end_src
* switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
* Ivy:
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+end_src
* Projectile:
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode))
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
* Mode line
#+begin_src emacs-lisp
  (use-package telephone-line
    :ensure t
    :init
    (telephone-line-mode 1))
#+end_src
* Navegador
#+BEGIN_SRC emacs-lisp
  ;; (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
* LaTex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'company-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-auctex t))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "/usr/bin/python3")
#+END_SRC
* Scheme
#+begin_src emacs-lisp
  (set-variable (quote scheme-program-name) "guile")
#+end_src
* Singular
#+BEGIN_SRC emacs-lisp
  (setq load-path (cons "<singular-emacs-home-directory>" load-path))
  (autoload 'singular "singular"
    "Start Singular using default values." t)
  (autoload 'singular-other "singular"
    "Ask for arguments and start Singular." t)
  (add-to-list 'load-path "/home/raziel/programas/singular/share/singular/emacs/")
  (require 'singular)
  (setq singular-emacs-home-directory "/home/raziel/programas/singular/share/singular/emacs/")
  (defvar current-menubar nil)
  (setq singular-executable-default "/home/raziel/programas/singular/bin/Singular")
#+END_SRC
* Flycheck
#+begin_src emacs-lisp
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init
  ;;   (global-flycheck-mode))

  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init
  ;;   (global-flycheck-mode)
  ;;   (setq flycheck-javascript-standard-executable "semistandard"))

  ;; (setq-default flycheck-disabled-checkers
  ;; 	      (append flycheck-disabled-checkers
  ;; 		      '(javascript-jshint json-jsonlist)))

  ;; ;; Enable eslint checker for web-mode
  ;; (flycheck-add-mode 'javascript-eslint 'web-mode)
  ;; ;; Enable flycheck globally
  ;; ;; (add-hook 'after-init-hook #'global-flycheck-mode)
  ;; (use-package add-node-modules-path
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'flycheck-mode-hook 'add-node-modules-path))
#+end_src
* eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :config
    (setq eglot-events-buffer-size 0)
    :hook
    (js-mode . eglot-ensure)
    (typescript-mode . eglot-ensure)
    (html-mode . eglot-ensure)
    (css-mode . eglot-ensure)
    (emacs-lisp-mode . eglot-ensure)
    (tex-mode . eglot-ensure))
#+end_src
* WebDev
** Javascript:
#+begin_src emacs-lisp
  (defun my-js-hook ()
    (setq js-indent-level 2)
    (subword-mode 1))
  (add-hook 'js-mode-hook 'my-js-hook)
#+end_src
** Type Script
#+begin_src emacs-lisp
  (defun my-ts-hook ()
    (subword-mode 1))
  (add-hook 'typescript-mode-hook 'my-ts-hook)
#+end_src
** CSS
#+begin_src emacs-lisp
  (defun my-css-hook ()
    (setq css-indent-offset 2))
  (add-hook 'css-mode-hook 'my-css-hook)
#+end_src
** Simple httpd
#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)

  (setq httpd-root "~/ejercicios-intek/presentations/redux-sagas")
  ;; (httpd-start)
#+end_src
* Company mode:
** Vainilla Company:
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src
** Usando LSP:
#+begin_src emacs-lisp
  ;; (use-package company
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :hook (after-init . global-company-mode)
  ;;   ;; :bind (:map company-active-map
  ;;   ;; 	 ("<tab>" . company-complete-selection))
  ;;   ;; 	(:map lsp-mode-map
  ;;   ;; 	 ("<tab>" . company-indent-or-complete-common))
  ;;   :custom
  ;;   (company-minimum-prefix-length 1)
  ;;   (company-idle-delay 0.0))

  ;; (use-package company-box
  ;;   :ensure t
  ;;   :hook (company-mode . company-box-mode))
#+end_src
* Code formatter (apheleia):
** Installation:
#+begin_src emacs-lisp
  (use-package apheleia
    :ensure t
    :init
    ;; (apheleia-global-mode +1)
    :config
    (setf (alist-get 'latexindent apheleia-formatters)
	  '("latexindent" "--logfile=/dev/null" "-l")))
#+end_src
* Load lisp
#+begin_src emacs-lisp
  (add-hook 'tetris-mode-hook
	    (load "~/.emacs.d/lisp/mytetris.el"))
#+end_src
* Orgmode:
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'toggle-truncate-lines)
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  (setq org-directory "~/Orgmode")
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-default-notes-file (concat org-directory "/Intinerario/tareassinclasificar.org"))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((haskell . t)
     (js . t)))
#+end_src
** org-ref:
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :ensure t)
  (use-package org-ref
    :ensure t
    :config
    (require 'org-ref-ivy)
    (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	  org-ref-insert-cite-function 'org-ref-cite-insert-ivy
	  org-ref-insert-label-function 'org-ref-insert-label-link
	  org-ref-insert-ref-function 'org-ref-insert-ref-link
	  org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (setq bibtex-completion-bibliography '("~/Sync/bibliografiaMat/mizbiblio.bib"))
    (setq bibtex-completion-library-path '("~/Articulos"))
    (setq bibtex-completion-pdf-field "File"))
#+end_src
** org-contacts:
#+begin_src emacs-lisp
  (use-package org-contacts
    :ensure t)
#+end_src
** Org-roam:
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Orgmode/huginandmunin"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :config
  ;;   (setq org-roam-directory "~/Orgmode/huginandmunin")
  ;;   (org-roam-db-autosync-mode))
#+end_src
* Dashboard:
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 10)
			    (bookmarks . 5)
			    (projects . 5)
			    (agenda . 5)
			    (registers . 5)))
    (setq dashboard-banner-logo-title "Hang the viggers!!!"))

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

#+end_src
* Info books:
#+begin_src emacs-lisp
  (setq Info-additional-directory-list '("~/Libros/tutoriales/sicp"))
#+end_src
